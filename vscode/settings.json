{
  // ================================ LAUNCH CONFIGURATION ======================================
  "launch": {
    "configurations": [],
    "compounds": []
  },

  // ================================ LANGUAGES CONFIGURATION ===================================
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[ruby]": {
    "editor.defaultFormatter": "rubocop.vscode-rubocop"
  },

  // ================================ EDITOR SETTINGS ===========================================
  "editor.lineNumbers": "relative",
  "editor.formatOnSave": true,
  "editor.fontLigatures": true,
  "editor.find.addExtraSpaceOnTop": false,
  "editor.smoothScrolling": true,
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.insertSpaces": false,
  "editor.suggestSelection": "first",
  "editor.inlineSuggest.enabled": true,
  "editor.autoClosingQuotes": "always",
  "editor.wordWrap": "on",
  "editor.accessibilitySupport": "off",
  "editor.fontFamily": "FiraCode Nerd Font",
  "editor.minimap.enabled": false,
  "editor.inlayHints.fontFamily": "FiraCode Nerd Font",
  "editor.codeLensFontFamily": "FiraCode Nerd Font",

  // ================================ WORKBENCH SETTINGS ===========================================
  "workbench.editor.labelFormat": "short",
  "workbench.list.smoothScrolling": true,
  "workbench.sideBar.location": "right",
  "workbench.localHistory.enabled": false,
  "workbench.colorTheme": "Default Light Modern",
  "workbench.editor.showTabs": "single",
  "workbench.layoutControl.enabled": false,
  "workbench.tips.enabled": false,
  "workbench.colorCustomizations": {
    "[Default Dark Modern]": {
      "statusBar.debuggingBackground": "#333333"
    },
    "[Default Light Modern]": {
      "statusBar.debuggingBackground": "#C2C2C2"
    }
  },
  "workbench.activityBar.location": "hidden",
  "workbench.iconTheme": "material-icon-theme",

  // ================================ GIT SETTINGS ==============================================
  "git.confirmSync": false,
  "git.autofetch": true,
  "git.inputValidationLength": 280,
  "git.inputValidationSubjectLength": 280,
  "gitlens.advanced.messages": {
    "suppressGitMissingWarning": true
  },
  "gitlens.currentLine.enabled": false,
  "gitlens.fileAnnotations.command": "blame",
  "gitlens.views.commitDetails.files.layout": "list",
  "gitlens.views.searchAndCompare.files.layout": "list",

  // ================================ EXPLORER SETTINGS =========================================
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "explorer.compactFolders": false,

  // ================================ TERMINAL SETTINGS =========================================
  "terminal.integrated.drawBoldTextInBrightColors": false,
  "terminal.integrated.scrollback": 50000,
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.tabs.location": "left",
  "terminal.integrated.smoothScrolling": true,
  "terminal.integrated.defaultProfile.windows": "Ubuntu (WSL)",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.persistentSessionReviveProcess": "never",
  "terminal.integrated.profiles.osx": {
    "zsh": {
      "path": "zsh",
      "args": ["-l"]
    }
  },
  "terminal.integrated.fontFamily": "FiraCode Nerd Font",
  "terminal.integrated.tabs.enabled": false,
  "terminal.integrated.fontLigatures.enabled": true,

  // ================================ DOCKER SETTINGS ===========================================
  "docker.containers.description": ["ContainerName", "Status"],
  "docker.containers.label": "ContainerName",

  // ================================ JSON SETTINGS =============================================
  "json.maxItemsComputed": 10000,

  // ================================ SECURITY SETTINGS =========================================
  "security.workspace.trust.untrustedFiles": "open",

  // ================================ SETTINGS SYNC =============================================
  "settingsSync.ignoredSettings": [
    "-python.defaultInterpreterPath",
    "workbench.colorTheme"
  ],

  // ================================ TASK SETTINGS =============================================
  "task.problemMatchers.neverPrompt": {
    "npm": true
  },

  // ================================ TYPESCRIPT & JAVASCRIPT SETTINGS ============================
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.preferences.quoteStyle": "single",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "js/ts.implicitProjectConfig.strictNullChecks": false,

  // ================================ GITHUB COPILOT SETTINGS ====================================
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": true,
    "scminput": false
  },
  "github.copilot.editor.enableAutoCompletions": true,

  // ================================ WINDOW SETTINGS ===========================================
  "window.autoDetectColorScheme": true,
  "window.dialogStyle": "custom",
  "window.commandCenter": false,
  "window.density.editorTabHeight": "compact",
  "window.nativeTabs": true,
  "window.customTitleBarVisibility": "never",
  "window.restoreWindows": "none",
  "breadcrumbs.filePath": "off",
  "workbench.startupEditor": "none",

  // ================================ SOLARGRAPH SETTINGS =======================================
  "solargraph.autoformat": true,
  "solargraph.formatting": true,

  // ================================ DIFF EDITOR SETTINGS ======================================
  "diffEditor.renderSideBySide": true,
  "diffEditor.hideUnchangedRegions.enabled": true,

  // ================================ BETTER TYPESCRIPT ERRORS SETTINGS =========================
  "betterTypeScriptErrors.prettify": true,

  // ================================ DEBUG SETTINGS ===============================
  "debug.openDebug": "neverOpen",
  "debug.toolBarLocation": "hidden",

  // ================================ REST CLIENT SETTINGS ===============================
  "rest-client.fontFamily": "FiraCode Nerd Font",
  "rest-client.previewResponseInUntitledDocument": true,

  // ================================ ERROR LENS ===============================
  "errorLens.messageEnabled": true,

  // ====================================================================================================
  // ====================================================================================================
  // ====================================================================================================
  // =========================================== VIM EXTENSION ==========================================
  // ====================================================================================================
  // =============== Anything past this point does not work without the Vim extension ===================
  // ================ You do not need to enable/disable anything, it will just work======================
  // ====================================================================================================
  // ================= https://marketplace.visualstudio.com/items?itemName=vscodevim.vim ================
  // ====================================================================================================
  // ====================================================================================================
  // ====================================================================================================
  "extensions.experimental.affinity": {
    // runs the extension in separate process for better performance
    "vscodevim.vim": 1
  },
  "vim.useSystemClipboard": true,
  "vim.showMarksInGutter": false,
  "vim.foldfix": true,
  "vim.surround": true,
  "vim.easymotion": true,
  "vim.easymotionKeys": "asdghklqwertyuiopzxcvbnmfj",
  "vim.leader": "<space>",
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      // Save File
      "before": ["<leader>", "w"],
      "commands": ["workbench.action.files.save"]
    },
    {
      // Flash
      "before": ["s"],
      "after": ["<leader>", "<leader>", "/"]
    },
    {
      // Flash Treesitter
      "before": ["S"],
      "after": ["<leader>", "<leader>", "<leader>", "j"]
    }
  ],
  "vim.normalModeKeyBindings": [
    {
      // Toggle Sidebar
      "before": ["<leader>", "b"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    {
      // Go to left window
      "before": ["<C-h>"],
      "after": ["<C-W>", "h"]
    },
    {
      // Go to lower window
      "before": ["<C-j>"],
      "after": ["<C-W>", "j"]
    },
    {
      // Go to upper window
      "before": ["<C-k>"],
      "after": ["<C-W>", "k"]
    },
    {
      // Go to right window
      "before": ["<C-l>"],
      "after": ["<C-W>", "l"]
    },
    {
      // Move down
      "before": ["<A-j>"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      // Move up
      "before": ["<A-k>"],
      "commands": ["editor.action.moveLinesUpAction"]
    },
    {
      // Prev buffer
      "before": ["<S-h>"],
      "commands": [":bprev"]
    },
    {
      // Next buffer
      "before": ["<S-l>"],
      "commands": [":bnext"]
    },
    {
      // Reload Window
      "before": ["<leader>", "u", "r"],
      "commands": ["workbench.action.reloadWindow"]
    },
    {
      // Go to Word (under cursor)
      "before": ["g", "w"],
      "after": ["*"]
    },
    {
      // New File
      "before": ["<leader>", "f", "n"],
      "commands": ["workbench.action.files.newUntitledFile"]
    },
    {
      // Toggle Word Wrap
      "before": ["<leader>", "u", "w"],
      "commands": ["editor.action.toggleWordWrap"]
    },
    {
      // Toggle Inlay Hints
      "before": ["<leader>", "u", "h"],
      "commands": ["errorLens.toggleInlineMessage"]
    },
    {
      // VSC Changelogs
      "before": ["<leader>", "L"],
      "commands": ["update.showCurrentReleaseNotes"]
    },
    {
      // Terminal (root dir)
      "before": ["<leader>", "f", "t"],
      "commands": ["workbench.action.createTerminalEditor"],
      "when": "terminal.active"
    },
    {
      // Line Diagnostics
      "before": ["<leader>", "c", "d"],
      "commands": ["editor.action.showHover"],
      "when": "workbench.panel.output.active"
    },
    {
      // LSP info
      "before": ["<leader>", "c", "l"],
      "commands": ["workbench.action.output.toggleOutput"]
    },
    {
      // Goto Definition
      "before": ["g", "d"],
      "commands": ["editor.action.revealDefinition"]
    },
    {
      // References
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },
    {
      // Goto Declaration
      "before": ["g", "D"],
      "commands": ["editor.action.revealDeclaration"]
    },
    {
      // Goto Implementation
      "before": ["g", "I"],
      "commands": ["editor.action.goToImplementation"]
    },
    {
      // Goto T[y]pe Definition
      "before": ["g", "y"],
      "commands": ["editor.action.goToTypeDefinition"]
    },
    {
      // Goto Symbol
      "before": ["g", "s"],
      "commands": ["workbench.action.gotoSymbol"]
    },
    {
      // Hover
      "before": ["K"],
      "commands": ["editor.action.showHover"]
    },
    {
      // Signature Help
      "before": ["g", "K"],
      "commands": ["editor.action.triggerParameterHints"],
      "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
      // Next Error
      "before": ["]", "e"],
      "commands": ["editor.action.marker.next"],
      "when": "editorFocus"
    },
    {
      // Prev Error
      "before": ["[", "e"],
      "commands": ["editor.action.marker.prev"],
      "when": "editorFocus"
    },
    {
      // Next Warning
      "before": ["]", "w"],
      "commands": ["editor.action.marker.next"],
      "when": "editorFocus"
    },
    {
      // Prev Warning
      "before": ["[", "w"],
      "commands": ["editor.action.marker.prev"],
      "when": "editorFocus"
    },
    {
      // Format Document
      "before": ["<leader>", "c", "F"],
      "commands": ["editor.action.formatDocument"],
      "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
      // Format Selection
      "before": ["<leader>", "c", "f"],
      "commands": ["editor.action.formatSelection"]
    },
    {
      // Code Action
      "before": ["<leader>", "c", "a"],
      "commands": ["editor.action.quickFix"],
      "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
      // Source Action
      "before": ["<leader>", "c", "A"],
      "commands": ["editor.action.quickFix"],
      "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
      // Rename
      "before": ["<leader>", "c", "r"],
      "commands": ["editor.action.rename"],
      "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
      // Replace in files (Spectre)
      "before": ["<leader>", "s", "r"],
      "commands": ["editor.action.startFindReplaceAction"],
      "when": "editorFocus || editorIsOpen"
    },
    {
      // Grep (root dir)
      "before": ["<leader>", "/"],
      "commands": ["workbench.action.findInFiles"]
    },
    {
      // Commands
      "before": ["<leader>", ":"],
      "commands": ["workbench.action.showCommands"]
    },
    {
      // Find Files (root dir)
      "before": ["<leader>", "<space>"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      // Buffers
      "before": ["<leader>", "f", "b"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      // Find Files (root dir)
      "before": ["<leader>", "f", "f"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      // Recent
      "before": ["<leader>", "f", "r"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      // commits
      "before": ["<leader>", "g", "c"],
      "commands": ["workbench.view.scm"],
      "when": "workbench.scm.active"
    },
    {
      // status
      "before": ["<leader>", "g", "s"],
      "commands": ["workbench.view.scm"],
      "when": "workbench.scm.active"
    },
    {
      // Document diagnostics
      "before": ["<leader>", "s", "d"],
      "commands": ["workbench.actions.view.problems"],
      "when": "workbench.panel.markers.view.active"
    },
    {
      // Grep (root dir)
      "before": ["<leader>", "s", "g"],
      "commands": ["workbench.action.findInFiles"]
    },
    {
      // Colorscheme with preview
      "before": ["<leader>", "u", "C"],
      "commands": ["workbench.action.selectTheme"]
    },
    {
      // Debug Start
      "before": ["<leader>", "d", "s"],
      "commands": ["workbench.action.debug.start"]
    },
    {
      // Debug Stop
      "before": ["<leader>", "d", "S"],
      "commands": ["workbench.action.debug.stop"]
    },
    {
      // Debug Continue
      "before": ["<leader>", "d", "c"],
      "commands": ["workbench.action.debug.continue"]
    },
    {
      // Debug Step Over
      "before": ["<leader>", "d", "o"],
      "commands": ["workbench.action.debug.stepOver"]
    },
    {
      // Debug Step Into
      "before": ["<leader>", "d", "i"],
      "commands": ["workbench.action.debug.stepInto"]
    },
    {
      // Debug Step Out
      "before": ["<leader>", "d", "O"],
      "commands": ["workbench.action.debug.stepOut"]
    },
    {
      // Debug Run
      "before": ["<leader>", "d", "r"],
      "commands": ["extension.js-debug.npmScript"]
    },
    {
      // Debug Pause
      "before": ["<leader>", "d", "p"],
      "commands": ["workbench.action.debug.pause"]
    },
    {
      // Debug Disconnect
      "before": ["<leader>", "d", "d"],
      "commands": ["workbench.action.debug.disconnect"]
    },
    {
      // Debug Toggle Breakpoint
      "before": ["<leader>", "d", "b"],
      "commands": ["editor.debug.action.toggleBreakpoint"]
    },
    {
      // Debug Toggle Column Breakpoint
      "before": ["<leader>", "d", "B"],
      "commands": ["editor.debug.action.toggleColumnBreakpoint"]
    },
    {
      // Debug Enable Breakpoint
      "before": ["<leader>", "d", "e"],
      "commands": ["editor.debug.action.enableOrDisableBreakpoint"]
    },
    {
      // Debug Show Hover
      "before": ["<leader>", "d", "k"],
      "commands": ["editor.debug.action.showDebugHover"]
    },
    {
      // Debug Next Breakpoint
      "before": ["<leader>", "]", "b"],
      "commands": ["editor.debug.action.goToNextBreakpoint"]
    },
    {
      // Debug Previous Breakpoint
      "before": ["<leader>", "[", "b"],
      "commands": ["editor.debug.action.goToPreviousBreakpoint"]
    },
    {
      // Focus Debug Output
      "before": ["<leader>", "d", "l"],
      "commands": ["workbench.debug.action.focusRepl"]
    }
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": ["<"],
      "after": ["<", "g", "v"]
    },
    {
      "before": [">"],
      "after": [">", "g", "v"]
    }
  ],
  "vim.insertModeKeyBindings": []
}
